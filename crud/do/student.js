/**
 * student.js
 * 数据操作模块
 * 职责：操作文件中的数据，只处理数据，不关心业务
 * @type {{symlink: (target: PathLike, path: PathLike, type: (symlink.Type | undefined | null), callback: NoParamCallback) => void, mkdirSync: (path: PathLike, options: (MakeDirectoryOptions & {recursive: true})) => (string | undefined), unlinkSync: (path: PathLike) => void, lchownSync: (path: PathLike, uid: number, gid: number) => void, ReadSyncOptions: ReadSyncOptions, linkSync: (existingPath: PathLike, newPath: PathLike) => void, readlink: (path: PathLike, options: (BaseEncodingOptions | BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), linkString: string) => void) => void, writeFile: (path: (PathLike | number), data: (string | NodeJS.ArrayBufferView), options: WriteFileOptions, callback: NoParamCallback) => void, StatsBase: StatsBase, StatOptions: StatOptions, WriteStream: WriteStream, openSync: (path: PathLike, flags: OpenMode, mode?: (Mode | null)) => number, OpenMode: number | string, lchmodSync: (path: PathLike, mode: Mode) => void, accessSync: (path: PathLike, mode?: number) => void, mkdtempSync: (prefix: string, options?: (BaseEncodingOptions | BufferEncoding | null)) => string, RmOptions: RmOptions, fdatasync: (fd: number, callback: NoParamCallback) => void, fstatSync: (fd: number, options?: (StatOptions & {bigint?: false | undefined})) => Stats, createReadStream: (path: PathLike, options?: (string | {flags?: string | undefined, encoding?: BufferEncoding | undefined, fd?: number | undefined, mode?: number | undefined, autoClose?: boolean | undefined, emitClose?: boolean | undefined, start?: number | undefined, end?: number | undefined, highWaterMark?: number | undefined})) => ReadStream, WriteVResult: WriteVResult, PathLike: string | Buffer | URL, ReadVResult: ReadVResult, writev: (fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, cb: (err: (NodeJS.ErrnoException | null), bytesWritten: number, buffers: NodeJS.ArrayBufferView[]) => void) => void, fsync: (fd: number, callback: NoParamCallback) => void, OpenDirOptions: OpenDirOptions, Dir: Dir, access: (path: PathLike, mode: (number | undefined), callback: NoParamCallback) => void, utimesSync: (path: PathLike, atime: (string | number | Date), mtime: (string | number | Date)) => void, readSync: (fd: number, buffer: NodeJS.ArrayBufferView, offset: number, length: number, position: (number | null)) => number, readFileSync: (path: (PathLike | number), options?: ({encoding?: null | undefined, flag?: string | undefined} | null)) => Buffer, lstat: (path: PathLike, callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void) => void, lchown: (path: PathLike, uid: number, gid: number, callback: NoParamCallback) => void, unlink: (path: PathLike, callback: NoParamCallback) => void, promises: {readFile: (path: (PathLike | FileHandle), options?: ({encoding?: null | undefined, flag?: OpenMode | undefined} | null)) => Promise<Buffer>, rename: (oldPath: PathLike, newPath: PathLike) => Promise<void>, lutimes: (path: PathLike, atime: (string | number | Date), mtime: (string | number | Date)) => Promise<void>, lchmod: (path: PathLike, mode: Mode) => Promise<void>, fchown: (handle: FileHandle, uid: number, gid: number) => Promise<void>, readdir: (path: PathLike, options?: ((BaseEncodingOptions & {withFileTypes?: false | undefined}) | BufferEncoding | null)) => Promise<string[]>, realpath: (path: PathLike, options?: (BaseEncodingOptions | BufferEncoding | null)) => Promise<string>, symlink: (target: PathLike, path: PathLike, type?: (string | null)) => Promise<void>, rm: (path: PathLike, options?: RmOptions) => Promise<void>, unlink: (path: PathLike) => Promise<void>, link: (existingPath: PathLike, newPath: PathLike) => Promise<void>, lchown: (path: PathLike, uid: number, gid: number) => Promise<void>, open: (path: PathLike, flags: (string | number), mode?: Mode) => Promise<FileHandle>, chown: (path: PathLike, uid: number, gid: number) => Promise<void>, opendir: (path: string, options?: OpenDirOptions) => Promise<Dir>, ftruncate: (handle: FileHandle, len?: number) => Promise<void>, readlink: (path: PathLike, options?: (BaseEncodingOptions | BufferEncoding | null)) => Promise<string>, utimes: (path: PathLike, atime: (string | number | Date), mtime: (string | number | Date)) => Promise<void>, read: <TBuffer extends Uint8Array>(handle: FileHandle, buffer: TBuffer, offset?: (number | null), length?: (number | null), position?: (number | null)) => Promise<{bytesRead: number, buffer: TBuffer}>, appendFile: (path: (PathLike | FileHandle), data: (string | Uint8Array), options?: ((BaseEncodingOptions & {mode?: Mode | undefined, flag?: OpenMode | undefined}) | BufferEncoding | null)) => Promise<void>, fdatasync: (handle: FileHandle) => Promise<void>, access: (path: PathLike, mode?: number) => Promise<void>, copyFile: (src: PathLike, dest: PathLike, flags?: number) => Promise<void>, lstat: (path: PathLike, opts?: (StatOptions & {bigint?: false | undefined})) => Promise<Stats>, stat: (path: PathLike, opts?: (StatOptions & {bigint?: false | undefined})) => Promise<Stats>, truncate: (path: PathLike, len?: number) => Promise<void>, write: <TBuffer extends Uint8Array>(handle: FileHandle, buffer: TBuffer, offset?: (number | null), length?: (number | null), position?: (number | null)) => Promise<{bytesWritten: number, buffer: TBuffer}>, fsync: (handle: FileHandle) => Promise<void>, writeFile: (path: (PathLike | FileHandle), data: (string | Uint8Array), options?: ((BaseEncodingOptions & {mode?: Mode | undefined, flag?: OpenMode | undefined}) | BufferEncoding | null)) => Promise<void>, mkdir: (path: PathLike, options: (MakeDirectoryOptions & {recursive: true})) => Promise<string | undefined>, FileHandle: FileHandle, mkdtemp: (prefix: string, options?: (BaseEncodingOptions | BufferEncoding | null)) => Promise<string>, chmod: (path: PathLike, mode: Mode) => Promise<void>, futimes: (handle: FileHandle, atime: (string | number | Date), mtime: (string | number | Date)) => Promise<void>, fchmod: (handle: FileHandle, mode: Mode) => Promise<void>, rmdir: (path: PathLike, options?: RmDirOptions) => Promise<void>} | {rename: (oldPath: PathLike, newPath: PathLike) => Promise<void>, cp: (source: string, destination: string, opts?: CopyOptions) => Promise<void>, lchmod: (path: PathLike, mode: Mode) => Promise<void>, readdir: (path: PathLike, options?: ((ObjectEncodingOptions & {withFileTypes?: false | undefined}) | BufferEncoding | null)) => Promise<string[]>, realpath: (path: PathLike, options?: (ObjectEncodingOptions | BufferEncoding | null)) => Promise<string>, FileReadOptions: FileReadOptions, opendir: (path: string, options?: OpenDirOptions) => Promise<Dir>, symlink: (target: PathLike, path: PathLike, type?: (string | null)) => Promise<void>, link: (existingPath: PathLike, newPath: PathLike) => Promise<void>, open: (path: PathLike, flags: (string | number), mode?: Mode) => Promise<FileHandle>, lchown: (path: PathLike, uid: number, gid: number) => Promise<void>, chown: (path: PathLike, uid: number, gid: number) => Promise<void>, FileReadResult: FileReadResult, FileChangeInfo: FileChangeInfo, readFile: (path: (PathLike | FileHandle), options?: (({encoding?: null | undefined, flag?: OpenMode | undefined} & Abortable) | null)) => Promise<Buffer>, readlink: (path: PathLike, options?: (ObjectEncodingOptions | BufferEncoding | null)) => Promise<string>, mkdir: (path: PathLike, options: (MakeDirectoryOptions & {recursive: true})) => Promise<string | undefined>, watch: (filename: PathLike, options: ((WatchOptions & {encoding: "buffer"}) | "buffer")) => AsyncIterable<FileChangeInfo<Buffer>>, appendFile: (path: (PathLike | FileHandle), data: (string | Uint8Array), options?: ((ObjectEncodingOptions & FlagAndOpenMode) | BufferEncoding | null)) => Promise<void>, access: (path: PathLike, mode?: number) => Promise<void>, copyFile: (src: PathLike, dest: PathLike, mode?: number) => Promise<void>, lstat: (path: PathLike, opts?: (StatOptions & {bigint?: false | undefined})) => Promise<Stats>, unlink: (path: PathLike) => Promise<void>, stat: (path: PathLike, opts?: (StatOptions & {bigint?: false | undefined})) => Promise<Stats>, truncate: (path: PathLike, len?: number) => Promise<void>, writeFile: (file: (PathLike | FileHandle), data: (string | NodeJS.ArrayBufferView | Iterable<string | NodeJS.ArrayBufferView> | AsyncIterable<string | NodeJS.ArrayBufferView> | Stream), options?: ((ObjectEncodingOptions & {mode?: Mode | undefined, flag?: OpenMode | undefined} & Abortable) | BufferEncoding | null)) => Promise<void>, lutimes: (path: PathLike, atime: (string | number | Date), mtime: (string | number | Date)) => Promise<void>, rm: (path: PathLike, options?: RmOptions) => Promise<void>, FileHandle: FileHandle, mkdtemp: (prefix: string, options?: (ObjectEncodingOptions | BufferEncoding | null)) => Promise<string>, chmod: (path: PathLike, mode: Mode) => Promise<void>, utimes: (path: PathLike, atime: (string | number | Date), mtime: (string | number | Date)) => Promise<void>, FlagAndOpenMode: FlagAndOpenMode, rmdir: (path: PathLike, options?: RmDirOptions) => Promise<void>}, NoParamCallback: (err: (NodeJS.ErrnoException | null)) => void, futimesSync: (fd: number, atime: (string | number | Date), mtime: (string | number | Date)) => void, renameSync: (oldPath: PathLike, newPath: PathLike) => void, fchown: (fd: number, uid: number, gid: number, callback: NoParamCallback) => void, readFile: (path: (PathLike | number), options: ({encoding?: null | undefined, flag?: string | undefined} | undefined | null), callback: (err: (NodeJS.ErrnoException | null), data: Buffer) => void) => void, mkdtemp: (prefix: string, options: (BaseEncodingOptions | BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), folder: string) => void) => void, fchownSync: (fd: number, uid: number, gid: number) => void, chmod: (path: PathLike, mode: Mode, callback: NoParamCallback) => void, readvSync: (fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position?: number) => number, BigIntOptions: BigIntOptions, rmdirSync: (path: PathLike, options?: RmDirOptions) => void, fchmodSync: (fd: number, mode: Mode) => void, constants: constants, existsSync: (path: PathLike) => boolean, MakeDirectoryOptions: MakeDirectoryOptions, truncate: (path: PathLike, len: (number | undefined | null), callback: NoParamCallback) => void, mkdir: (path: PathLike, options: (MakeDirectoryOptions & {recursive: true}), callback: (err: (NodeJS.ErrnoException | null), path?: string) => void) => void, opendirSync: (path: string, options?: OpenDirOptions) => Dir, read: <TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: number, length: number, position: (number | null), callback: (err: (NodeJS.ErrnoException | null), bytesRead: number, buffer: TBuffer) => void) => void, watch: (filename: PathLike, options: ({encoding?: BufferEncoding | null | undefined, persistent?: boolean | undefined, recursive?: boolean | undefined} | BufferEncoding | undefined | null), listener?: (event: ("rename" | "change"), filename: string) => void) => FSWatcher, BufferEncodingOption: "buffer" | {encoding: "buffer"}, Stats: Stats, readlinkSync: (path: PathLike, options?: (BaseEncodingOptions | BufferEncoding | null)) => string, ReadStream: ReadStream, appendFile: (file: (PathLike | number), data: (string | Uint8Array), options: WriteFileOptions, callback: NoParamCallback) => void, watchFile: (filename: PathLike, options: ({persistent?: boolean | undefined, interval?: number | undefined} | undefined), listener: (curr: Stats, prev: Stats) => void) => void, fchmod: (fd: number, mode: Mode, callback: NoParamCallback) => void, BaseEncodingOptions: BaseEncodingOptions, futimes: (fd: number, atime: (string | number | Date), mtime: (string | number | Date), callback: NoParamCallback) => void, link: (existingPath: PathLike, newPath: PathLike, callback: NoParamCallback) => void, unwatchFile: (filename: PathLike, listener?: (curr: Stats, prev: Stats) => void) => void, realpath: (path: PathLike, options: (BaseEncodingOptions | BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), resolvedPath: string) => void) => void, createWriteStream: (path: PathLike, options?: (string | {flags?: string | undefined, encoding?: BufferEncoding | undefined, fd?: number | undefined, mode?: number | undefined, autoClose?: boolean | undefined, emitClose?: boolean | undefined, start?: number | undefined, highWaterMark?: number | undefined})) => WriteStream, appendFileSync: (file: (PathLike | number), data: (string | Uint8Array), options?: WriteFileOptions) => void, truncateSync: (path: PathLike, len?: (number | null)) => void, statSync: (path: PathLike, options?: (StatOptions & {bigint?: false | undefined})) => Stats, rmdir: (path: PathLike, callback: NoParamCallback) => void, lchmod: (path: PathLike, mode: Mode, callback: NoParamCallback) => void, rm: (path: PathLike, callback: NoParamCallback) => void, fsyncSync: (fd: number) => void, readdirSync: (path: PathLike, options?: ({encoding: BufferEncoding | null, withFileTypes?: false | undefined} | BufferEncoding | null)) => string[], open: (path: PathLike, flags: OpenMode, mode: (Mode | undefined | null), callback: (err: (NodeJS.ErrnoException | null), fd: number) => void) => void, FSWatcher: FSWatcher, lutimesSync: (path: PathLike, atime: (string | number | Date), mtime: (string | number | Date)) => void, fdatasyncSync: (fd: number) => void, writeFileSync: (path: (PathLike | number), data: (string | NodeJS.ArrayBufferView), options?: WriteFileOptions) => void, writeSync: (fd: number, buffer: NodeJS.ArrayBufferView, offset?: (number | null), length?: (number | null), position?: (number | null)) => number, close: (fd: number, callback: NoParamCallback) => void, stat: (path: PathLike, callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void) => void, rmSync: (path: PathLike, options?: RmOptions) => void, opendir: (path: string, cb: (err: (NodeJS.ErrnoException | null), dir: Dir) => void) => void, RmDirOptions: RmDirOptions, realpathSync: (path: PathLike, options?: (BaseEncodingOptions | BufferEncoding | null)) => string, copyFile: (src: PathLike, dest: PathLike, callback: NoParamCallback) => void, chmodSync: (path: PathLike, mode: Mode) => void, readv: (fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, cb: (err: (NodeJS.ErrnoException | null), bytesRead: number, buffers: NodeJS.ArrayBufferView[]) => void) => void, Dirent: Dirent, readdir: (path: PathLike, options: ({encoding: BufferEncoding | null, withFileTypes?: false | undefined} | BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), files: string[]) => void) => void, rename: (oldPath: PathLike, newPath: PathLike, callback: NoParamCallback) => void, ftruncate: (fd: number, len: (number | undefined | null), callback: NoParamCallback) => void, write: <TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: (number | undefined | null), length: (number | undefined | null), position: (number | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, buffer: TBuffer) => void) => void, utimes: (path: PathLike, atime: (string | number | Date), mtime: (string | number | Date), callback: NoParamCallback) => void, Mode: number | string, closeSync: (fd: number) => void, fstat: (fd: number, callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void) => void, WriteFileOptions: (BaseEncodingOptions & {mode?: Mode | undefined, flag?: string | undefined}) | string | null, lstatSync: (path: PathLike, options?: (StatOptions & {bigint?: false | undefined})) => Stats, lutimes: (path: PathLike, atime: (string | number | Date), mtime: (string | number | Date), callback: NoParamCallback) => void, symlinkSync: (target: PathLike, path: PathLike, type?: (symlink.Type | null)) => void, chownSync: (path: PathLike, uid: number, gid: number) => void, BigIntStats: BigIntStats, writevSync: (fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position?: number) => number, exists: (path: PathLike, callback: (exists: boolean) => void) => void, copyFileSync: (src: PathLike, dest: PathLike, flags?: number) => void, chown: (path: PathLike, uid: number, gid: number, callback: NoParamCallback) => void, ftruncateSync: (fd: number, len?: (number | null)) => void} | {symlink: (target: PathLike, path: PathLike, type: (symlink.Type | undefined | null), callback: NoParamCallback) => void, mkdirSync: (path: PathLike, options: (MakeDirectoryOptions & {recursive: true})) => (string | undefined), EncodingOption: ObjectEncodingOptions | "ascii" | "utf8" | "utf-8" | "utf16le" | "ucs2" | "ucs-2" | "base64" | "base64url" | "latin1" | "binary" | "hex" | undefined | null, truncate: (path: PathLike, len: (number | undefined | null), callback: NoParamCallback) => void, fchown: (fd: number, uid: number, gid: number, callback: NoParamCallback) => void, readlink: (path: PathLike, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), linkString: string) => void) => void, watch: (filename: PathLike, options: ((WatchOptions & {encoding: "buffer"}) | "buffer"), listener?: WatchListener<Buffer>) => FSWatcher, StatOptions: StatOptions, WriteStream: WriteStream, openSync: (path: PathLike, flags: OpenMode, mode?: (Mode | null)) => number, appendFile: (path: PathOrFileDescriptor, data: (string | Uint8Array), options: WriteFileOptions, callback: NoParamCallback) => void, OpenMode: number | string, OpenDirOptions: OpenDirOptions, lchmodSync: (path: PathLike, mode: Mode) => void, mkdtempSync: (prefix: string, options?: EncodingOption) => string, unlink: (path: PathLike, callback: NoParamCallback) => void, BigIntStats: BigIntStats, futimes: (fd: number, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback) => void, fdatasync: (fd: number, callback: NoParamCallback) => void, fdatasyncSync: (fd: number) => void, mkdir: (path: PathLike, options: (MakeDirectoryOptions & {recursive: true}), callback: (err: (NodeJS.ErrnoException | null), path?: string) => void) => void, linkSync: (existingPath: PathLike, newPath: PathLike) => void, WriteVResult: WriteVResult, PathLike: string | Buffer | URL, readdirSync: (path: PathLike, options?: ({encoding: BufferEncoding | null, withFileTypes?: false | undefined} | BufferEncoding | null)) => string[], writev: (fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, cb: (err: (NodeJS.ErrnoException | null), bytesWritten: number, buffers: NodeJS.ArrayBufferView[]) => void) => void, fsync: (fd: number, callback: NoParamCallback) => void, ReadPosition: number | bigint, Stats: Stats, access: (path: PathLike, mode: (number | undefined), callback: NoParamCallback) => void, utimesSync: (path: PathLike, atime: TimeLike, mtime: TimeLike) => void, readSync: (fd: number, buffer: NodeJS.ArrayBufferView, offset: number, length: number, position: (ReadPosition | null)) => number, readFileSync: (path: PathOrFileDescriptor, options?: ({encoding?: null | undefined, flag?: string | undefined} | null)) => Buffer, lstat: (path: PathLike, callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void) => void, lchown: (path: PathLike, uid: number, gid: number, callback: NoParamCallback) => void, rm: (path: PathLike, callback: NoParamCallback) => void, promises: {readFile: (path: (PathLike | FileHandle), options?: ({encoding?: null | undefined, flag?: OpenMode | undefined} | null)) => Promise<Buffer>, rename: (oldPath: PathLike, newPath: PathLike) => Promise<void>, lutimes: (path: PathLike, atime: (string | number | Date), mtime: (string | number | Date)) => Promise<void>, lchmod: (path: PathLike, mode: Mode) => Promise<void>, fchown: (handle: FileHandle, uid: number, gid: number) => Promise<void>, readdir: (path: PathLike, options?: ((BaseEncodingOptions & {withFileTypes?: false | undefined}) | BufferEncoding | null)) => Promise<string[]>, realpath: (path: PathLike, options?: (BaseEncodingOptions | BufferEncoding | null)) => Promise<string>, symlink: (target: PathLike, path: PathLike, type?: (string | null)) => Promise<void>, rm: (path: PathLike, options?: RmOptions) => Promise<void>, unlink: (path: PathLike) => Promise<void>, link: (existingPath: PathLike, newPath: PathLike) => Promise<void>, lchown: (path: PathLike, uid: number, gid: number) => Promise<void>, open: (path: PathLike, flags: (string | number), mode?: Mode) => Promise<FileHandle>, chown: (path: PathLike, uid: number, gid: number) => Promise<void>, opendir: (path: string, options?: OpenDirOptions) => Promise<Dir>, ftruncate: (handle: FileHandle, len?: number) => Promise<void>, readlink: (path: PathLike, options?: (BaseEncodingOptions | BufferEncoding | null)) => Promise<string>, utimes: (path: PathLike, atime: (string | number | Date), mtime: (string | number | Date)) => Promise<void>, read: <TBuffer extends Uint8Array>(handle: FileHandle, buffer: TBuffer, offset?: (number | null), length?: (number | null), position?: (number | null)) => Promise<{bytesRead: number, buffer: TBuffer}>, appendFile: (path: (PathLike | FileHandle), data: (string | Uint8Array), options?: ((BaseEncodingOptions & {mode?: Mode | undefined, flag?: OpenMode | undefined}) | BufferEncoding | null)) => Promise<void>, fdatasync: (handle: FileHandle) => Promise<void>, access: (path: PathLike, mode?: number) => Promise<void>, copyFile: (src: PathLike, dest: PathLike, flags?: number) => Promise<void>, lstat: (path: PathLike, opts?: (StatOptions & {bigint?: false | undefined})) => Promise<Stats>, stat: (path: PathLike, opts?: (StatOptions & {bigint?: false | undefined})) => Promise<Stats>, truncate: (path: PathLike, len?: number) => Promise<void>, write: <TBuffer extends Uint8Array>(handle: FileHandle, buffer: TBuffer, offset?: (number | null), length?: (number | null), position?: (number | null)) => Promise<{bytesWritten: number, buffer: TBuffer}>, fsync: (handle: FileHandle) => Promise<void>, writeFile: (path: (PathLike | FileHandle), data: (string | Uint8Array), options?: ((BaseEncodingOptions & {mode?: Mode | undefined, flag?: OpenMode | undefined}) | BufferEncoding | null)) => Promise<void>, mkdir: (path: PathLike, options: (MakeDirectoryOptions & {recursive: true})) => Promise<string | undefined>, FileHandle: FileHandle, mkdtemp: (prefix: string, options?: (BaseEncodingOptions | BufferEncoding | null)) => Promise<string>, chmod: (path: PathLike, mode: Mode) => Promise<void>, futimes: (handle: FileHandle, atime: (string | number | Date), mtime: (string | number | Date)) => Promise<void>, fchmod: (handle: FileHandle, mode: Mode) => Promise<void>, rmdir: (path: PathLike, options?: RmDirOptions) => Promise<void>, cp: (source: string, destination: string, opts?: CopyOptions) => Promise<void>, FileReadOptions: FileReadOptions, FileReadResult: FileReadResult, FileChangeInfo: FileChangeInfo, watch: (filename: PathLike, options: ((WatchOptions & {encoding: "buffer"}) | "buffer")) => AsyncIterable<FileChangeInfo<Buffer>>, FlagAndOpenMode: FlagAndOpenMode}, NoParamCallback: (err: (NodeJS.ErrnoException | null)) => void, futimesSync: (fd: number, atime: TimeLike, mtime: TimeLike) => void, fstatSync: StatSyncFn<number>, exists: (path: PathLike, callback: (exists: boolean) => void) => void, readFile: (path: PathOrFileDescriptor, options: (({encoding?: null | undefined, flag?: string | undefined} & Abortable) | undefined | null), callback: (err: (NodeJS.ErrnoException | null), data: Buffer) => void) => void, renameSync: (oldPath: PathLike, newPath: PathLike) => void, fchownSync: (fd: number, uid: number, gid: number) => void, chmod: (path: PathLike, mode: Mode, callback: NoParamCallback) => void, ReadVResult: ReadVResult, BigIntOptions: BigIntOptions, rmdirSync: (path: PathLike, options?: RmDirOptions) => void, fchmodSync: (fd: number, mode: Mode) => void, constants: constants, existsSync: (path: PathLike) => boolean, Dir: Dir, ObjectEncodingOptions: ObjectEncodingOptions, StatsBase: StatsBase, opendirSync: (path: string, options?: OpenDirOptions) => Dir, read: <TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: number, length: number, position: (ReadPosition | null), callback: (err: (NodeJS.ErrnoException | null), bytesRead: number, buffer: TBuffer) => void) => void, cpSync: (source: string, destination: string, opts?: CopyOptions) => void, BufferEncodingOption: "buffer" | {encoding: "buffer"}, cp: (source: string, destination: string, callback: (err: (NodeJS.ErrnoException | null)) => void) => void, readlinkSync: (path: PathLike, options?: EncodingOption) => string, ReadStream: ReadStream, Mode: number | string, watchFile: (filename: PathLike, options: ({persistent?: boolean | undefined, interval?: number | undefined} | undefined), listener: (curr: Stats, prev: Stats) => void) => void, fchmod: (fd: number, mode: Mode, callback: NoParamCallback) => void, writeFile: (file: PathOrFileDescriptor, data: (string | NodeJS.ArrayBufferView), options: WriteFileOptions, callback: NoParamCallback) => void, link: (existingPath: PathLike, newPath: PathLike, callback: NoParamCallback) => void, unwatchFile: (filename: PathLike, listener?: (curr: Stats, prev: Stats) => void) => void, WatchOptions: WatchOptions, realpath: (path: PathLike, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), resolvedPath: string) => void) => void, createWriteStream: (path: PathLike, options?: (BufferEncoding | StreamOptions)) => WriteStream, appendFileSync: (path: PathOrFileDescriptor, data: (string | Uint8Array), options?: WriteFileOptions) => void, accessSync: (path: PathLike, mode?: number) => void, truncateSync: (path: PathLike, len?: (number | null)) => void, MakeDirectoryOptions: MakeDirectoryOptions, statSync: StatSyncFn<PathLike>, rmdir: (path: PathLike, callback: NoParamCallback) => void, lchmod: (path: PathLike, mode: Mode, callback: NoParamCallback) => void, RmOptions: RmOptions, fsyncSync: (fd: number) => void, StatSyncFn: StatSyncFn, open: (path: PathLike, flags: OpenMode, mode: (Mode | undefined | null), callback: (err: (NodeJS.ErrnoException | null), fd: number) => void) => void, FSWatcher: FSWatcher, lutimesSync: (path: PathLike, atime: TimeLike, mtime: TimeLike) => void, copyFile: (src: PathLike, dest: PathLike, callback: NoParamCallback) => void, writeFileSync: (file: PathOrFileDescriptor, data: (string | NodeJS.ArrayBufferView), options?: WriteFileOptions) => void, writeSync: (fd: number, buffer: NodeJS.ArrayBufferView, offset?: (number | null), length?: (number | null), position?: (number | null)) => number, close: (fd: number, callback?: NoParamCallback) => void, stat: (path: PathLike, callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void) => void, TimeLike: string | number | Date, unlinkSync: (path: PathLike) => void, opendir: (path: string, cb: (err: (NodeJS.ErrnoException | null), dir: Dir) => void) => void, RmDirOptions: RmDirOptions, realpathSync: (path: PathLike, options?: EncodingOption) => string, ReadSyncOptions: ReadSyncOptions, chmodSync: (path: PathLike, mode: Mode) => void, readv: (fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, cb: (err: (NodeJS.ErrnoException | null), bytesRead: number, buffers: NodeJS.ArrayBufferView[]) => void) => void, CopyOptions: CopyOptions, Dirent: Dirent, rmSync: (path: PathLike, options?: RmOptions) => void, readdir: (path: PathLike, options: ({encoding: BufferEncoding | null, withFileTypes?: false | undefined} | BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), files: string[]) => void) => void, rename: (oldPath: PathLike, newPath: PathLike, callback: NoParamCallback) => void, ftruncate: (fd: number, len: (number | undefined | null), callback: NoParamCallback) => void, write: <TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: (number | undefined | null), length: (number | undefined | null), position: (number | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, buffer: TBuffer) => void) => void, mkdtemp: (prefix: string, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), folder: string) => void) => void, utimes: (path: PathLike, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback) => void, PathOrFileDescriptor: string | Buffer | URL | number, closeSync: (fd: number) => void, fstat: (fd: number, callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void) => void, WriteFileOptions: (BaseEncodingOptions & {mode?: Mode | undefined, flag?: string | undefined}) | string | null, lstatSync: StatSyncFn<PathLike>, lutimes: (path: PathLike, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback) => void, ftruncateSync: (fd: number, len?: (number | null)) => void, symlinkSync: (target: PathLike, path: PathLike, type?: (symlink.Type | null)) => void, chownSync: (path: PathLike, uid: number, gid: number) => void, readvSync: (fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position?: number) => number, writevSync: (fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position?: number) => number, WatchEventType: "rename" | "change", WatchListener: (event: WatchEventType, filename: T) => void, copyFileSync: (src: PathLike, dest: PathLike, mode?: number) => void, createReadStream: (path: PathLike, options?: (BufferEncoding | ReadStreamOptions)) => ReadStream, chown: (path: PathLike, uid: number, gid: number, callback: NoParamCallback) => void, lchownSync: (path: PathLike, uid: number, gid: number) => void}}
 */

var fs = require('fs')
var dbPath = './db'

/** 获取所有学生列表
 * return []
 * @type {{symlink: (target: PathLike, path: PathLike, type: (symlink.Type | undefined | null), callback: NoParamCallback) => void, mkdirSync: (path: PathLike, options: (MakeDirectoryOptions & {recursive: true})) => (string | undefined), unlinkSync: (path: PathLike) => void, lchownSync: (path: PathLike, uid: number, gid: number) => void, ReadSyncOptions: ReadSyncOptions, linkSync: (existingPath: PathLike, newPath: PathLike) => void, readlink: (path: PathLike, options: (BaseEncodingOptions | BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), linkString: string) => void) => void, writeFile: (path: (PathLike | number), data: (string | NodeJS.ArrayBufferView), options: WriteFileOptions, callback: NoParamCallback) => void, StatsBase: StatsBase, StatOptions: StatOptions, WriteStream: WriteStream, openSync: (path: PathLike, flags: OpenMode, mode?: (Mode | null)) => number, OpenMode: number | string, lchmodSync: (path: PathLike, mode: Mode) => void, accessSync: (path: PathLike, mode?: number) => void, mkdtempSync: (prefix: string, options?: (BaseEncodingOptions | BufferEncoding | null)) => string, RmOptions: RmOptions, fdatasync: (fd: number, callback: NoParamCallback) => void, fstatSync: (fd: number, options?: (StatOptions & {bigint?: false | undefined})) => Stats, createReadStream: (path: PathLike, options?: (string | {flags?: string | undefined, encoding?: BufferEncoding | undefined, fd?: number | undefined, mode?: number | undefined, autoClose?: boolean | undefined, emitClose?: boolean | undefined, start?: number | undefined, end?: number | undefined, highWaterMark?: number | undefined})) => ReadStream, WriteVResult: WriteVResult, PathLike: string | Buffer | URL, ReadVResult: ReadVResult, writev: (fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, cb: (err: (NodeJS.ErrnoException | null), bytesWritten: number, buffers: NodeJS.ArrayBufferView[]) => void) => void, fsync: (fd: number, callback: NoParamCallback) => void, OpenDirOptions: OpenDirOptions, Dir: Dir, access: (path: PathLike, mode: (number | undefined), callback: NoParamCallback) => void, utimesSync: (path: PathLike, atime: (string | number | Date), mtime: (string | number | Date)) => void, readSync: (fd: number, buffer: NodeJS.ArrayBufferView, offset: number, length: number, position: (number | null)) => number, readFileSync: (path: (PathLike | number), options?: ({encoding?: null | undefined, flag?: string | undefined} | null)) => Buffer, lstat: (path: PathLike, callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void) => void, lchown: (path: PathLike, uid: number, gid: number, callback: NoParamCallback) => void, unlink: (path: PathLike, callback: NoParamCallback) => void, promises: {readFile: (path: (PathLike | FileHandle), options?: ({encoding?: null | undefined, flag?: OpenMode | undefined} | null)) => Promise<Buffer>, rename: (oldPath: PathLike, newPath: PathLike) => Promise<void>, lutimes: (path: PathLike, atime: (string | number | Date), mtime: (string | number | Date)) => Promise<void>, lchmod: (path: PathLike, mode: Mode) => Promise<void>, fchown: (handle: FileHandle, uid: number, gid: number) => Promise<void>, readdir: (path: PathLike, options?: ((BaseEncodingOptions & {withFileTypes?: false | undefined}) | BufferEncoding | null)) => Promise<string[]>, realpath: (path: PathLike, options?: (BaseEncodingOptions | BufferEncoding | null)) => Promise<string>, symlink: (target: PathLike, path: PathLike, type?: (string | null)) => Promise<void>, rm: (path: PathLike, options?: RmOptions) => Promise<void>, unlink: (path: PathLike) => Promise<void>, link: (existingPath: PathLike, newPath: PathLike) => Promise<void>, lchown: (path: PathLike, uid: number, gid: number) => Promise<void>, open: (path: PathLike, flags: (string | number), mode?: Mode) => Promise<FileHandle>, chown: (path: PathLike, uid: number, gid: number) => Promise<void>, opendir: (path: string, options?: OpenDirOptions) => Promise<Dir>, ftruncate: (handle: FileHandle, len?: number) => Promise<void>, readlink: (path: PathLike, options?: (BaseEncodingOptions | BufferEncoding | null)) => Promise<string>, utimes: (path: PathLike, atime: (string | number | Date), mtime: (string | number | Date)) => Promise<void>, read: <TBuffer extends Uint8Array>(handle: FileHandle, buffer: TBuffer, offset?: (number | null), length?: (number | null), position?: (number | null)) => Promise<{bytesRead: number, buffer: TBuffer}>, appendFile: (path: (PathLike | FileHandle), data: (string | Uint8Array), options?: ((BaseEncodingOptions & {mode?: Mode | undefined, flag?: OpenMode | undefined}) | BufferEncoding | null)) => Promise<void>, fdatasync: (handle: FileHandle) => Promise<void>, access: (path: PathLike, mode?: number) => Promise<void>, copyFile: (src: PathLike, dest: PathLike, flags?: number) => Promise<void>, lstat: (path: PathLike, opts?: (StatOptions & {bigint?: false | undefined})) => Promise<Stats>, stat: (path: PathLike, opts?: (StatOptions & {bigint?: false | undefined})) => Promise<Stats>, truncate: (path: PathLike, len?: number) => Promise<void>, write: <TBuffer extends Uint8Array>(handle: FileHandle, buffer: TBuffer, offset?: (number | null), length?: (number | null), position?: (number | null)) => Promise<{bytesWritten: number, buffer: TBuffer}>, fsync: (handle: FileHandle) => Promise<void>, writeFile: (path: (PathLike | FileHandle), data: (string | Uint8Array), options?: ((BaseEncodingOptions & {mode?: Mode | undefined, flag?: OpenMode | undefined}) | BufferEncoding | null)) => Promise<void>, mkdir: (path: PathLike, options: (MakeDirectoryOptions & {recursive: true})) => Promise<string | undefined>, FileHandle: FileHandle, mkdtemp: (prefix: string, options?: (BaseEncodingOptions | BufferEncoding | null)) => Promise<string>, chmod: (path: PathLike, mode: Mode) => Promise<void>, futimes: (handle: FileHandle, atime: (string | number | Date), mtime: (string | number | Date)) => Promise<void>, fchmod: (handle: FileHandle, mode: Mode) => Promise<void>, rmdir: (path: PathLike, options?: RmDirOptions) => Promise<void>} | {rename: (oldPath: PathLike, newPath: PathLike) => Promise<void>, cp: (source: string, destination: string, opts?: CopyOptions) => Promise<void>, lchmod: (path: PathLike, mode: Mode) => Promise<void>, readdir: (path: PathLike, options?: ((ObjectEncodingOptions & {withFileTypes?: false | undefined}) | BufferEncoding | null)) => Promise<string[]>, realpath: (path: PathLike, options?: (ObjectEncodingOptions | BufferEncoding | null)) => Promise<string>, FileReadOptions: FileReadOptions, opendir: (path: string, options?: OpenDirOptions) => Promise<Dir>, symlink: (target: PathLike, path: PathLike, type?: (string | null)) => Promise<void>, link: (existingPath: PathLike, newPath: PathLike) => Promise<void>, open: (path: PathLike, flags: (string | number), mode?: Mode) => Promise<FileHandle>, lchown: (path: PathLike, uid: number, gid: number) => Promise<void>, chown: (path: PathLike, uid: number, gid: number) => Promise<void>, FileReadResult: FileReadResult, FileChangeInfo: FileChangeInfo, readFile: (path: (PathLike | FileHandle), options?: (({encoding?: null | undefined, flag?: OpenMode | undefined} & Abortable) | null)) => Promise<Buffer>, readlink: (path: PathLike, options?: (ObjectEncodingOptions | BufferEncoding | null)) => Promise<string>, mkdir: (path: PathLike, options: (MakeDirectoryOptions & {recursive: true})) => Promise<string | undefined>, watch: (filename: PathLike, options: ((WatchOptions & {encoding: "buffer"}) | "buffer")) => AsyncIterable<FileChangeInfo<Buffer>>, appendFile: (path: (PathLike | FileHandle), data: (string | Uint8Array), options?: ((ObjectEncodingOptions & FlagAndOpenMode) | BufferEncoding | null)) => Promise<void>, access: (path: PathLike, mode?: number) => Promise<void>, copyFile: (src: PathLike, dest: PathLike, mode?: number) => Promise<void>, lstat: (path: PathLike, opts?: (StatOptions & {bigint?: false | undefined})) => Promise<Stats>, unlink: (path: PathLike) => Promise<void>, stat: (path: PathLike, opts?: (StatOptions & {bigint?: false | undefined})) => Promise<Stats>, truncate: (path: PathLike, len?: number) => Promise<void>, writeFile: (file: (PathLike | FileHandle), data: (string | NodeJS.ArrayBufferView | Iterable<string | NodeJS.ArrayBufferView> | AsyncIterable<string | NodeJS.ArrayBufferView> | Stream), options?: ((ObjectEncodingOptions & {mode?: Mode | undefined, flag?: OpenMode | undefined} & Abortable) | BufferEncoding | null)) => Promise<void>, lutimes: (path: PathLike, atime: (string | number | Date), mtime: (string | number | Date)) => Promise<void>, rm: (path: PathLike, options?: RmOptions) => Promise<void>, FileHandle: FileHandle, mkdtemp: (prefix: string, options?: (ObjectEncodingOptions | BufferEncoding | null)) => Promise<string>, chmod: (path: PathLike, mode: Mode) => Promise<void>, utimes: (path: PathLike, atime: (string | number | Date), mtime: (string | number | Date)) => Promise<void>, FlagAndOpenMode: FlagAndOpenMode, rmdir: (path: PathLike, options?: RmDirOptions) => Promise<void>}, NoParamCallback: (err: (NodeJS.ErrnoException | null)) => void, futimesSync: (fd: number, atime: (string | number | Date), mtime: (string | number | Date)) => void, renameSync: (oldPath: PathLike, newPath: PathLike) => void, fchown: (fd: number, uid: number, gid: number, callback: NoParamCallback) => void, readFile: (path: (PathLike | number), options: ({encoding?: null | undefined, flag?: string | undefined} | undefined | null), callback: (err: (NodeJS.ErrnoException | null), data: Buffer) => void) => void, mkdtemp: (prefix: string, options: (BaseEncodingOptions | BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), folder: string) => void) => void, fchownSync: (fd: number, uid: number, gid: number) => void, chmod: (path: PathLike, mode: Mode, callback: NoParamCallback) => void, readvSync: (fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position?: number) => number, BigIntOptions: BigIntOptions, rmdirSync: (path: PathLike, options?: RmDirOptions) => void, fchmodSync: (fd: number, mode: Mode) => void, constants: constants, existsSync: (path: PathLike) => boolean, MakeDirectoryOptions: MakeDirectoryOptions, truncate: (path: PathLike, len: (number | undefined | null), callback: NoParamCallback) => void, mkdir: (path: PathLike, options: (MakeDirectoryOptions & {recursive: true}), callback: (err: (NodeJS.ErrnoException | null), path?: string) => void) => void, opendirSync: (path: string, options?: OpenDirOptions) => Dir, read: <TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: number, length: number, position: (number | null), callback: (err: (NodeJS.ErrnoException | null), bytesRead: number, buffer: TBuffer) => void) => void, watch: (filename: PathLike, options: ({encoding?: BufferEncoding | null | undefined, persistent?: boolean | undefined, recursive?: boolean | undefined} | BufferEncoding | undefined | null), listener?: (event: ("rename" | "change"), filename: string) => void) => FSWatcher, BufferEncodingOption: "buffer" | {encoding: "buffer"}, Stats: Stats, readlinkSync: (path: PathLike, options?: (BaseEncodingOptions | BufferEncoding | null)) => string, ReadStream: ReadStream, appendFile: (file: (PathLike | number), data: (string | Uint8Array), options: WriteFileOptions, callback: NoParamCallback) => void, watchFile: (filename: PathLike, options: ({persistent?: boolean | undefined, interval?: number | undefined} | undefined), listener: (curr: Stats, prev: Stats) => void) => void, fchmod: (fd: number, mode: Mode, callback: NoParamCallback) => void, BaseEncodingOptions: BaseEncodingOptions, futimes: (fd: number, atime: (string | number | Date), mtime: (string | number | Date), callback: NoParamCallback) => void, link: (existingPath: PathLike, newPath: PathLike, callback: NoParamCallback) => void, unwatchFile: (filename: PathLike, listener?: (curr: Stats, prev: Stats) => void) => void, realpath: (path: PathLike, options: (BaseEncodingOptions | BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), resolvedPath: string) => void) => void, createWriteStream: (path: PathLike, options?: (string | {flags?: string | undefined, encoding?: BufferEncoding | undefined, fd?: number | undefined, mode?: number | undefined, autoClose?: boolean | undefined, emitClose?: boolean | undefined, start?: number | undefined, highWaterMark?: number | undefined})) => WriteStream, appendFileSync: (file: (PathLike | number), data: (string | Uint8Array), options?: WriteFileOptions) => void, truncateSync: (path: PathLike, len?: (number | null)) => void, statSync: (path: PathLike, options?: (StatOptions & {bigint?: false | undefined})) => Stats, rmdir: (path: PathLike, callback: NoParamCallback) => void, lchmod: (path: PathLike, mode: Mode, callback: NoParamCallback) => void, rm: (path: PathLike, callback: NoParamCallback) => void, fsyncSync: (fd: number) => void, readdirSync: (path: PathLike, options?: ({encoding: BufferEncoding | null, withFileTypes?: false | undefined} | BufferEncoding | null)) => string[], open: (path: PathLike, flags: OpenMode, mode: (Mode | undefined | null), callback: (err: (NodeJS.ErrnoException | null), fd: number) => void) => void, FSWatcher: FSWatcher, lutimesSync: (path: PathLike, atime: (string | number | Date), mtime: (string | number | Date)) => void, fdatasyncSync: (fd: number) => void, writeFileSync: (path: (PathLike | number), data: (string | NodeJS.ArrayBufferView), options?: WriteFileOptions) => void, writeSync: (fd: number, buffer: NodeJS.ArrayBufferView, offset?: (number | null), length?: (number | null), position?: (number | null)) => number, close: (fd: number, callback: NoParamCallback) => void, stat: (path: PathLike, callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void) => void, rmSync: (path: PathLike, options?: RmOptions) => void, opendir: (path: string, cb: (err: (NodeJS.ErrnoException | null), dir: Dir) => void) => void, RmDirOptions: RmDirOptions, realpathSync: (path: PathLike, options?: (BaseEncodingOptions | BufferEncoding | null)) => string, copyFile: (src: PathLike, dest: PathLike, callback: NoParamCallback) => void, chmodSync: (path: PathLike, mode: Mode) => void, readv: (fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, cb: (err: (NodeJS.ErrnoException | null), bytesRead: number, buffers: NodeJS.ArrayBufferView[]) => void) => void, Dirent: Dirent, readdir: (path: PathLike, options: ({encoding: BufferEncoding | null, withFileTypes?: false | undefined} | BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), files: string[]) => void) => void, rename: (oldPath: PathLike, newPath: PathLike, callback: NoParamCallback) => void, ftruncate: (fd: number, len: (number | undefined | null), callback: NoParamCallback) => void, write: <TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: (number | undefined | null), length: (number | undefined | null), position: (number | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, buffer: TBuffer) => void) => void, utimes: (path: PathLike, atime: (string | number | Date), mtime: (string | number | Date), callback: NoParamCallback) => void, Mode: number | string, closeSync: (fd: number) => void, fstat: (fd: number, callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void) => void, WriteFileOptions: (BaseEncodingOptions & {mode?: Mode | undefined, flag?: string | undefined}) | string | null, lstatSync: (path: PathLike, options?: (StatOptions & {bigint?: false | undefined})) => Stats, lutimes: (path: PathLike, atime: (string | number | Date), mtime: (string | number | Date), callback: NoParamCallback) => void, symlinkSync: (target: PathLike, path: PathLike, type?: (symlink.Type | null)) => void, chownSync: (path: PathLike, uid: number, gid: number) => void, BigIntStats: BigIntStats, writevSync: (fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position?: number) => number, exists: (path: PathLike, callback: (exists: boolean) => void) => void, copyFileSync: (src: PathLike, dest: PathLike, flags?: number) => void, chown: (path: PathLike, uid: number, gid: number, callback: NoParamCallback) => void, ftruncateSync: (fd: number, len?: (number | null)) => void} | {symlink: (target: PathLike, path: PathLike, type: (symlink.Type | undefined | null), callback: NoParamCallback) => void, mkdirSync: (path: PathLike, options: (MakeDirectoryOptions & {recursive: true})) => (string | undefined), EncodingOption: ObjectEncodingOptions | "ascii" | "utf8" | "utf-8" | "utf16le" | "ucs2" | "ucs-2" | "base64" | "base64url" | "latin1" | "binary" | "hex" | undefined | null, truncate: (path: PathLike, len: (number | undefined | null), callback: NoParamCallback) => void, fchown: (fd: number, uid: number, gid: number, callback: NoParamCallback) => void, readlink: (path: PathLike, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), linkString: string) => void) => void, watch: (filename: PathLike, options: ((WatchOptions & {encoding: "buffer"}) | "buffer"), listener?: WatchListener<Buffer>) => FSWatcher, StatOptions: StatOptions, WriteStream: WriteStream, openSync: (path: PathLike, flags: OpenMode, mode?: (Mode | null)) => number, appendFile: (path: PathOrFileDescriptor, data: (string | Uint8Array), options: WriteFileOptions, callback: NoParamCallback) => void, OpenMode: number | string, OpenDirOptions: OpenDirOptions, lchmodSync: (path: PathLike, mode: Mode) => void, mkdtempSync: (prefix: string, options?: EncodingOption) => string, unlink: (path: PathLike, callback: NoParamCallback) => void, BigIntStats: BigIntStats, futimes: (fd: number, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback) => void, fdatasync: (fd: number, callback: NoParamCallback) => void, fdatasyncSync: (fd: number) => void, mkdir: (path: PathLike, options: (MakeDirectoryOptions & {recursive: true}), callback: (err: (NodeJS.ErrnoException | null), path?: string) => void) => void, linkSync: (existingPath: PathLike, newPath: PathLike) => void, WriteVResult: WriteVResult, PathLike: string | Buffer | URL, readdirSync: (path: PathLike, options?: ({encoding: BufferEncoding | null, withFileTypes?: false | undefined} | BufferEncoding | null)) => string[], writev: (fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, cb: (err: (NodeJS.ErrnoException | null), bytesWritten: number, buffers: NodeJS.ArrayBufferView[]) => void) => void, fsync: (fd: number, callback: NoParamCallback) => void, ReadPosition: number | bigint, Stats: Stats, access: (path: PathLike, mode: (number | undefined), callback: NoParamCallback) => void, utimesSync: (path: PathLike, atime: TimeLike, mtime: TimeLike) => void, readSync: (fd: number, buffer: NodeJS.ArrayBufferView, offset: number, length: number, position: (ReadPosition | null)) => number, readFileSync: (path: PathOrFileDescriptor, options?: ({encoding?: null | undefined, flag?: string | undefined} | null)) => Buffer, lstat: (path: PathLike, callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void) => void, lchown: (path: PathLike, uid: number, gid: number, callback: NoParamCallback) => void, rm: (path: PathLike, callback: NoParamCallback) => void, promises: {readFile: (path: (PathLike | FileHandle), options?: ({encoding?: null | undefined, flag?: OpenMode | undefined} | null)) => Promise<Buffer>, rename: (oldPath: PathLike, newPath: PathLike) => Promise<void>, lutimes: (path: PathLike, atime: (string | number | Date), mtime: (string | number | Date)) => Promise<void>, lchmod: (path: PathLike, mode: Mode) => Promise<void>, fchown: (handle: FileHandle, uid: number, gid: number) => Promise<void>, readdir: (path: PathLike, options?: ((BaseEncodingOptions & {withFileTypes?: false | undefined}) | BufferEncoding | null)) => Promise<string[]>, realpath: (path: PathLike, options?: (BaseEncodingOptions | BufferEncoding | null)) => Promise<string>, symlink: (target: PathLike, path: PathLike, type?: (string | null)) => Promise<void>, rm: (path: PathLike, options?: RmOptions) => Promise<void>, unlink: (path: PathLike) => Promise<void>, link: (existingPath: PathLike, newPath: PathLike) => Promise<void>, lchown: (path: PathLike, uid: number, gid: number) => Promise<void>, open: (path: PathLike, flags: (string | number), mode?: Mode) => Promise<FileHandle>, chown: (path: PathLike, uid: number, gid: number) => Promise<void>, opendir: (path: string, options?: OpenDirOptions) => Promise<Dir>, ftruncate: (handle: FileHandle, len?: number) => Promise<void>, readlink: (path: PathLike, options?: (BaseEncodingOptions | BufferEncoding | null)) => Promise<string>, utimes: (path: PathLike, atime: (string | number | Date), mtime: (string | number | Date)) => Promise<void>, read: <TBuffer extends Uint8Array>(handle: FileHandle, buffer: TBuffer, offset?: (number | null), length?: (number | null), position?: (number | null)) => Promise<{bytesRead: number, buffer: TBuffer}>, appendFile: (path: (PathLike | FileHandle), data: (string | Uint8Array), options?: ((BaseEncodingOptions & {mode?: Mode | undefined, flag?: OpenMode | undefined}) | BufferEncoding | null)) => Promise<void>, fdatasync: (handle: FileHandle) => Promise<void>, access: (path: PathLike, mode?: number) => Promise<void>, copyFile: (src: PathLike, dest: PathLike, flags?: number) => Promise<void>, lstat: (path: PathLike, opts?: (StatOptions & {bigint?: false | undefined})) => Promise<Stats>, stat: (path: PathLike, opts?: (StatOptions & {bigint?: false | undefined})) => Promise<Stats>, truncate: (path: PathLike, len?: number) => Promise<void>, write: <TBuffer extends Uint8Array>(handle: FileHandle, buffer: TBuffer, offset?: (number | null), length?: (number | null), position?: (number | null)) => Promise<{bytesWritten: number, buffer: TBuffer}>, fsync: (handle: FileHandle) => Promise<void>, writeFile: (path: (PathLike | FileHandle), data: (string | Uint8Array), options?: ((BaseEncodingOptions & {mode?: Mode | undefined, flag?: OpenMode | undefined}) | BufferEncoding | null)) => Promise<void>, mkdir: (path: PathLike, options: (MakeDirectoryOptions & {recursive: true})) => Promise<string | undefined>, FileHandle: FileHandle, mkdtemp: (prefix: string, options?: (BaseEncodingOptions | BufferEncoding | null)) => Promise<string>, chmod: (path: PathLike, mode: Mode) => Promise<void>, futimes: (handle: FileHandle, atime: (string | number | Date), mtime: (string | number | Date)) => Promise<void>, fchmod: (handle: FileHandle, mode: Mode) => Promise<void>, rmdir: (path: PathLike, options?: RmDirOptions) => Promise<void>, cp: (source: string, destination: string, opts?: CopyOptions) => Promise<void>, FileReadOptions: FileReadOptions, FileReadResult: FileReadResult, FileChangeInfo: FileChangeInfo, watch: (filename: PathLike, options: ((WatchOptions & {encoding: "buffer"}) | "buffer")) => AsyncIterable<FileChangeInfo<Buffer>>, FlagAndOpenMode: FlagAndOpenMode}, NoParamCallback: (err: (NodeJS.ErrnoException | null)) => void, futimesSync: (fd: number, atime: TimeLike, mtime: TimeLike) => void, fstatSync: StatSyncFn<number>, exists: (path: PathLike, callback: (exists: boolean) => void) => void, readFile: (path: PathOrFileDescriptor, options: (({encoding?: null | undefined, flag?: string | undefined} & Abortable) | undefined | null), callback: (err: (NodeJS.ErrnoException | null), data: Buffer) => void) => void, renameSync: (oldPath: PathLike, newPath: PathLike) => void, fchownSync: (fd: number, uid: number, gid: number) => void, chmod: (path: PathLike, mode: Mode, callback: NoParamCallback) => void, ReadVResult: ReadVResult, BigIntOptions: BigIntOptions, rmdirSync: (path: PathLike, options?: RmDirOptions) => void, fchmodSync: (fd: number, mode: Mode) => void, constants: constants, existsSync: (path: PathLike) => boolean, Dir: Dir, ObjectEncodingOptions: ObjectEncodingOptions, StatsBase: StatsBase, opendirSync: (path: string, options?: OpenDirOptions) => Dir, read: <TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: number, length: number, position: (ReadPosition | null), callback: (err: (NodeJS.ErrnoException | null), bytesRead: number, buffer: TBuffer) => void) => void, cpSync: (source: string, destination: string, opts?: CopyOptions) => void, BufferEncodingOption: "buffer" | {encoding: "buffer"}, cp: (source: string, destination: string, callback: (err: (NodeJS.ErrnoException | null)) => void) => void, readlinkSync: (path: PathLike, options?: EncodingOption) => string, ReadStream: ReadStream, Mode: number | string, watchFile: (filename: PathLike, options: ({persistent?: boolean | undefined, interval?: number | undefined} | undefined), listener: (curr: Stats, prev: Stats) => void) => void, fchmod: (fd: number, mode: Mode, callback: NoParamCallback) => void, writeFile: (file: PathOrFileDescriptor, data: (string | NodeJS.ArrayBufferView), options: WriteFileOptions, callback: NoParamCallback) => void, link: (existingPath: PathLike, newPath: PathLike, callback: NoParamCallback) => void, unwatchFile: (filename: PathLike, listener?: (curr: Stats, prev: Stats) => void) => void, WatchOptions: WatchOptions, realpath: (path: PathLike, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), resolvedPath: string) => void) => void, createWriteStream: (path: PathLike, options?: (BufferEncoding | StreamOptions)) => WriteStream, appendFileSync: (path: PathOrFileDescriptor, data: (string | Uint8Array), options?: WriteFileOptions) => void, accessSync: (path: PathLike, mode?: number) => void, truncateSync: (path: PathLike, len?: (number | null)) => void, MakeDirectoryOptions: MakeDirectoryOptions, statSync: StatSyncFn<PathLike>, rmdir: (path: PathLike, callback: NoParamCallback) => void, lchmod: (path: PathLike, mode: Mode, callback: NoParamCallback) => void, RmOptions: RmOptions, fsyncSync: (fd: number) => void, StatSyncFn: StatSyncFn, open: (path: PathLike, flags: OpenMode, mode: (Mode | undefined | null), callback: (err: (NodeJS.ErrnoException | null), fd: number) => void) => void, FSWatcher: FSWatcher, lutimesSync: (path: PathLike, atime: TimeLike, mtime: TimeLike) => void, copyFile: (src: PathLike, dest: PathLike, callback: NoParamCallback) => void, writeFileSync: (file: PathOrFileDescriptor, data: (string | NodeJS.ArrayBufferView), options?: WriteFileOptions) => void, writeSync: (fd: number, buffer: NodeJS.ArrayBufferView, offset?: (number | null), length?: (number | null), position?: (number | null)) => number, close: (fd: number, callback?: NoParamCallback) => void, stat: (path: PathLike, callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void) => void, TimeLike: string | number | Date, unlinkSync: (path: PathLike) => void, opendir: (path: string, cb: (err: (NodeJS.ErrnoException | null), dir: Dir) => void) => void, RmDirOptions: RmDirOptions, realpathSync: (path: PathLike, options?: EncodingOption) => string, ReadSyncOptions: ReadSyncOptions, chmodSync: (path: PathLike, mode: Mode) => void, readv: (fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, cb: (err: (NodeJS.ErrnoException | null), bytesRead: number, buffers: NodeJS.ArrayBufferView[]) => void) => void, CopyOptions: CopyOptions, Dirent: Dirent, rmSync: (path: PathLike, options?: RmOptions) => void, readdir: (path: PathLike, options: ({encoding: BufferEncoding | null, withFileTypes?: false | undefined} | BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), files: string[]) => void) => void, rename: (oldPath: PathLike, newPath: PathLike, callback: NoParamCallback) => void, ftruncate: (fd: number, len: (number | undefined | null), callback: NoParamCallback) => void, write: <TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: (number | undefined | null), length: (number | undefined | null), position: (number | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, buffer: TBuffer) => void) => void, mkdtemp: (prefix: string, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), folder: string) => void) => void, utimes: (path: PathLike, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback) => void, PathOrFileDescriptor: string | Buffer | URL | number, closeSync: (fd: number) => void, fstat: (fd: number, callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void) => void, WriteFileOptions: (BaseEncodingOptions & {mode?: Mode | undefined, flag?: string | undefined}) | string | null, lstatSync: StatSyncFn<PathLike>, lutimes: (path: PathLike, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback) => void, ftruncateSync: (fd: number, len?: (number | null)) => void, symlinkSync: (target: PathLike, path: PathLike, type?: (symlink.Type | null)) => void, chownSync: (path: PathLike, uid: number, gid: number) => void, readvSync: (fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position?: number) => number, writevSync: (fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position?: number) => number, WatchEventType: "rename" | "change", WatchListener: (event: WatchEventType, filename: T) => void, copyFileSync: (src: PathLike, dest: PathLike, mode?: number) => void, createReadStream: (path: PathLike, options?: (BufferEncoding | ReadStreamOptions)) => ReadStream, chown: (path: PathLike, uid: number, gid: number, callback: NoParamCallback) => void, lchownSync: (path: PathLike, uid: number, gid: number) => void}}
 */
exports.find = function (callback) {
    console.log('开始读取文件')
    fs.readFile(dbPath,function (err, data) {
        if (err) {
           return callback(err)
        }
        callback(null,JSON.parse(data).students)
    })
}

// 添加保存学生
exports.save = function (student,callback) {

}

// 删除学生
exports.delete = function (student,callback) {

}

// 更新学生
exports.reflash = function (student,callback) {

}
